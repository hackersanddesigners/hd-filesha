# Why fileSHA

> 1. reflects on the motivation/fascination behind file-sharing as a purposeful activity as well as artistic, experimental non-solutionist way of discussing and challenging dogmas around information exchange online. 

> 500 words max

The fileSHA mailing-list project was born out of a personal curiosity and fascination with mailing-lists. The frustration in the last 5-10 years for contributing to a certain online community, and at some point finding out how that software does not exist anymore (website is down, it's being sold) has become much more tangible when during the covid-19 pandemic a lot more people jumped into online communities (or that's the impression).

A deeper connection with mailing lists comes from my endless fascination for a piece of software called `git`. This is what propelled the Linux project to be a viable, internet based, multiplayer effort. `git` uses emails as the main format to collaborate on a project, which means: mailing list. Looking up on the www for examples of old mailing-list archives, i found [The cryptography archives](https://www.metzdowd.com/pipermail/cryptography/).

The list goes back to 1970 (probably a Linux bug), and then up to the beginning of the 2000s. Would this have been possible with something like the now (2022) well known Discord software? Does this have to do with Discord per se, or with the evolution of the HTTP protocol?

Because of this, i dreamt of working with emails and mailing-list, instead of HTTP and websites. What's the UI offered by a mailing-list? How easy is it to join one? Which types of interaction can be designed in this space and which "social etiquette" can we use, or stretch, or ignore?

File sharing came into the picture mostly as an easy to pick example to use in order to sketch out a simple email-based game. As much as mailing list has been relegated to mostly FLOSS software projects, file sharing was once big in the 2000s and slowly faded out, due also to improvements in internet bandwidth as well as web-streaming technologies. 

To be clear, this is not an exercise in software nostalgia. Rather a way to find possible answers around the "What else is possible and available and that we might have forgotten?" kind of quest.

The game was designed around the idea of the *exquisite corpse* format. This was possible due to some *flexible* part of how emails works: we can rewrite slices of the received / sent message that is then going to be sent to another email address.

Each email sent down the chain would be used as a prompt to pick some material from one's computer and mix it with the received material, or simply add to it. We took the chance to use a fairly established p2p file sync software, adding a time constrain to the game dynamics: the person receiving the email should figure out with the person who sent the message when to be both online, so that the p2p software can work and transfer the data between computers.

The mailing list allows to send messages to the list itself: this is usually used to send back useful information about the list (how to subscribe, unsubscribe, change settings, etc) and we bent that to send back the rules of the game and some tips on how to move forward with the game. Hard to say if anyone used these options, but in terms of UI exploration it was a great moment, connecting to more two-way conversational-like type of computer interactions. 
