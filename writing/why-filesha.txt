# Why fileSHA

> 1. reflects on the motivation/fascination behind file-sharing as a purposeful activity as well as artistic, experimental non-solutionist way of discussing and challenging dogmas around information exchange online. 

> 500 words max

*fileSHA* was one of the H&D meetups organized during 2021 as part of the activities program of the year. It consisted of an email, turn-based game using a mailing-list software: think of a chat program happening over emails. You send a message to the list's email address and that message is sent to everyone else in the list. We carried out the game by using file-sharing as the activity, in which a random participant would receive a prompt email to share a file in whatever way they'd prefer, and the next random participant would need to get that file (sometimes by coordinating with the previous user) and then they'd have to decide how to use that input source with their own chosen file. Each time, no one else in the list would know what was going on except the two randomly chosen participants.

The project was born out of a personal curiosity and fascination with mailing-lists. One reason comes from a recurrent frustration which developed in the last 5-10 years whenever contributing to a certain online community, where often at some point you might find out how that place does not exist anymore because the software "is gone" (website is down, or it's being sold and the rules of the game have changed). This prompted the question: *what else is possible and available and that we might have forgotten?*

To be clear, this is not an exercise in software nostalgia.

Another reason stems from my endless fascination for a piece of software called `git`. This is what propelled the Linux project to be a viable, internet based, multiplayer effort. `git` uses emails as the main format to collaborate on a project, which means: mailing list. 

What can a mailing list afford? Looking up on the www for examples of old mailing-list, i found for instance [The cryptography archives](https://www.metzdowd.com/pipermail/cryptography/). The list goes back to 1970 (probably a Linux bug), and then up to the beginning of the 2000s. Would this have been possible with something like the now (2022) well known Discord software, an expressly "community" oriented web service? Does this have to do with Discord per se, or with the composition and evolution of the HTTP [^http] protocol?

[^http]: the HyperText Transfer Protocol. What's used to build websites and have them accessible online over the internet.

These points given, i dreamt of working with the email protocol and mailing-list, instead of the web. What's the UI offered by a mailing-list? How easy is it to join one? Which types of interaction can be designed in this space and which "social etiquette" can we use, or stretch, or ignore?

We decided to pick file sharing as the activity to carry out in the email-based game as it connects hand-in-hand with another interest of ours: peer2peer computing. Most p2p file-sharing software demands both users to be online at their computer at the same time, which introduces some nice, fun requirement in the context of a non real-time technique like emails: human coordination. Another reason to go with file-sharing is that it points to the access and archivability option of actually exchanging files instead of using cloud-based or streaming software, where instead files are accessed and "live" only online. As much as email are easily copyable, shareable and archivable, file-sharing provides similar capabilities.

> 2. it would be nice to show the game in a protocoling way.. as a how-to manual of sorts which could be carried out in different context by different people.


Following the game in a protocol format . While it's been originally performed using emails, we will try to distill and extract most of its components in a such a way that it can be repeated with a different setup. Eg, the technical constraints can be replaced and chosen at will.

Here the original code repository with instructions: <https://github.com/hackersanddesigners/hd-filesha>.

This is a chain-based game, so the more people who join it, the better. While 3 people would be the minimum, probably 5-6 is a preferred size. 

This is an *exquisite-corpse* game, to which we added two more elements:

- semi-randomness of the next player being chosen by the game
- "secrecy" between the two players exchanging the ongoing outcome

We also specifically tried to come with an activity to perform during the game that would introduce extra degree of "complexity". For instance, the game ticks at every 72 hours, when a new player is semi-randomly selected from the list. As well as by sometimes choosing, while playing the game, file-sharing techniques that require real-time coordination between participants (eg being online at the computer at the same time or through a certain period of time).

The two technologies that we choose are partly or completely asynchronous (file-sharing and emails through a mailing list), which helps to create friction within a linear time framework.

This is the list of rules:

- setup a way for people interested in the game to join

In our case the list remained open also while the game was being played out, meaning that effectively someone could join during the game, both extending the game duration as well as being [^semi-randomly] chosen by the game to be the next participant

[^Semi-randomly]: By this we mean that the game would pick someone from the list of participants who was not being already chosen. Plus, in a computer system, there seems to be only semi-randomness as an option anyway.

- setup a system to randomly pick the next player

We did it via computer software using a semi-random function. Further rules can be added to it, for instance did the participant join early or later on in the process.

- setup a game clock and set a time interval for it

We opted for 72 hours in a software asynchronous setting, and it turned out to be too little time to perform the player's tasks: receive the file; add, remove and / or extend it; pick a file-sharing method; share it to the next player. 

- pick a way for the two selected players to exchange information privately

We broke the main benefit of using a mailing-list software, which is to send to everyone in the list the same message posted to the list address.  We also exploited email software by re-writing the email address of the sender before manually sending the email posted to the list to the next randomly chosen player.

- choose an exchange activity to do during the game

We went with file-sharing for reasons explained above. The fact that it could be interpreted quite widely, added more unforeseen elements to the gameplay which we though could add to the overall strict linear-time experience.

- kick-off the game as the host

Start the chain of "exchange-activity" transformation by setting an interesting example. Eg, if file-sharing, pick a file and way of sharing that can stir fun engagement.

- keep participants up to date

If the clock interval is large, eg at least bigger than a few hours total of gameplay, it might be a good idea to keep everyone posted about what's going on, while they are not actively playing. Of course if this happens in the same room, than it's probably not necessary.


[more rules?]

[I'll think of a closing point]

[Anja suggested also images]
